import math

def _explorar_a_partir_de(indice_atual: int, soma_atual: int, lista: list[int], soma_maxima_container: list[float]):
    """
    Fun√ß√£o recursiva que explora todas as subse√ß√µes que come√ßam em um determinado ponto.
    Esta √© a ess√™ncia do "backtracking" para este problema.

    Args:
        indice_atual (int): O √≠ndice do elemento que estamos adicionando √† subse√ß√£o.
        soma_atual (int): A soma da subse√ß√£o constru√≠da at√© o passo anterior.
        lista (list[int]): A lista original completa.
        soma_maxima_container (list[float]): Um container mut√°vel para guardar a maior soma encontrada globalmente.
    """
    # Condi√ß√£o de parada: se o √≠ndice est√° fora da lista, n√£o h√° mais como explorar.
    if indice_atual >= len(lista):
        return

    # --- A√ß√£o no n√≥ atual ---
    # Adiciona o elemento atual √† soma da subse√ß√£o que estamos construindo.
    nova_soma_subsecao = soma_atual + lista[indice_atual]

    # Compara a soma desta nova subse√ß√£o com a m√°xima global j√° encontrada.
    soma_maxima_container[0] = max(soma_maxima_container[0], nova_soma_subsecao)

    # --- Passo recursivo (Explorar) ---
    # Continua a explora√ß√£o, estendendo a subse√ß√£o atual com o pr√≥ximo elemento.
    _explorar_a_partir_de(indice_atual + 1, nova_soma_subsecao, lista, soma_maxima_container)
    
    # Ao retornar da chamada recursiva, o "backtrack" acontece naturalmente, pois a
    # pilha de chamadas volta para a fun√ß√£o `resolver_soma_maxima_backtracking`,
    # que ent√£o iniciar√° uma nova explora√ß√£o a partir do pr√≥ximo ponto de partida.

def resolver_soma_maxima_backtracking(lista: list[int]) -> int:
    """
    Fun√ß√£o principal para resolver o Problema da Subse√ß√£o de Soma M√°xima
    usando o paradigma de Backtracking (busca exaustiva recursiva).

    Args:
        lista (list[int]): Uma lista de inteiros.

    Returns:
        int: O valor da soma da subse√ß√£o cont√≠gua de maior valor.
    """
    if not lista:
        return 0

    # Usamos um container mut√°vel (lista) para que a vari√°vel possa ser
    # modificada dentro das fun√ß√µes recursivas por refer√™ncia.
    # Iniciamos com -infinito para lidar corretamente com listas de negativos.
    soma_maxima_container = [-math.inf]

    # --- Ponto de Partida para o Backtracking ---
    # Este loop define cada ponto de partida poss√≠vel para uma subse√ß√£o.
    # Para cada `i`, iniciamos uma nova "√°rvore de explora√ß√£o".
    for i in range(len(lista)):
        # A explora√ß√£o come√ßa no √≠ndice `i`. A soma inicial √© 0, pois
        # a subse√ß√£o ainda n√£o foi formada. A fun√ß√£o _explorar_a_partir_de
        # ir√° formar a primeira subse√ß√£o [lista[i]] e depois estend√™-la.
        _explorar_a_partir_de(i, 0, lista, soma_maxima_container)

    return int(soma_maxima_container[0])


# --- SE√á√ÉO PARA TESTE LOCAL ---
if __name__ == "__main__":
    print("üß™ Iniciando testes do algoritmo de Soma M√°xima com Backtracking...")

    # Exemplo 1: O caso cl√°ssico
    lista_1 = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
    # Subse√ß√£o de soma m√°xima √© [4, -1, 2, 1], com soma 6
    print(f"\nLista: {lista_1}")
    print(f"Soma m√°xima encontrada: {resolver_soma_maxima_backtracking(lista_1)} (Esperado: 6)")
    print("-" * 40)

    # Exemplo 2: Todos os n√∫meros s√£o negativos
    lista_2 = [-10, -1, -5, -2, -8]
    # Subse√ß√£o de soma m√°xima √© [-1], com soma -1
    print(f"Lista: {lista_2}")
    print(f"Soma m√°xima encontrada: {resolver_soma_maxima_backtracking(lista_2)} (Esperado: -1)")
    print("-" * 40)
    
    # Exemplo 3: Todos os n√∫meros s√£o positivos
    lista_3 = [1, 2, 3, 4, 5]
    # Subse√ß√£o de soma m√°xima √© a pr√≥pria lista, com soma 15
    print(f"Lista: {lista_3}")
    print(f"Soma m√°xima encontrada: {resolver_soma_maxima_backtracking(lista_3)} (Esperado: 15)")
    print("-" * 40)
    
    # Exemplo 4: Lista vazia
    lista_4 = []
    print(f"Lista: {lista_4}")
    print(f"Soma m√°xima encontrada: {resolver_soma_maxima_backtracking(lista_4)} (Esperado: 0)")
    print("-" * 40)

    print("‚úÖ Testes conclu√≠dos.")